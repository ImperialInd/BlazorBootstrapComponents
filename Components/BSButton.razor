@using BlazorBootstrapComponents.Enums
@{
	string _class = string.Concat("btn ",
						GetButtonBackgroundColor(),
						(DisableTextWrapping ? "text-nowrap " : ""),
						GetButtonOutlineColor(),
						GetButtonSize(),
						(Bold ? "fw-bold " : ""),
						(AsClose ? "btn-close " : ""),
						(Underline ? "text-decoration-underline " : ""),
						Class).Trim();

	string _style = string.Concat((Width.Length > 0 ? $"width: {Width}; " : ""),
								(Height.Length > 0 ? $"height: {Height}; " : "")).Trim();

	if (Disabled)
	{
		AdditionalAttributes.Remove("disabled");
		AdditionalAttributes.Add("disabled", true);
	}
	else
	{
		AdditionalAttributes.Remove("disabled");
	}

	if (AsClose || AsAlertClose)
	{
		AdditionalAttributes.Remove("type");
		AdditionalAttributes.Remove("aria-label");
		AdditionalAttributes.Add("type", "button");
		AdditionalAttributes.Add("aria-label", "Close");
	}
	else
	{
		AdditionalAttributes.Remove("type");
		AdditionalAttributes.Remove("aria-label");
	}

	if (AsAlertClose)
	{
		AdditionalAttributes.Remove("data-bs-dismiss");
		AdditionalAttributes.Add("data-bs-dismiss", "alert");
	}
	else
	{
		AdditionalAttributes.Remove("data-bs-dismiss");
	}

}

@if (_style.Length > 0)
{
	<button class=@_class style=@_style @attributes=@AdditionalAttributes @onclick=@OnClickHandler @ondblclick=@OnDoubleClickHandler>
		@if (Icon != IconNamesEnum.Empty)
		{
			<BSIcon Icon=@Icon>&nbsp;</BSIcon>
		}
		@ChildContent
	</button>
}
else
{
	<button class=@_class @attributes=@AdditionalAttributes @onclick=@OnClickHandler @ondblclick=@OnDoubleClickHandler>
		@if (Icon != IconNamesEnum.Empty)
		{
			<BSIcon Icon=@Icon>&nbsp;</BSIcon>
		}
		@ChildContent
	</button>
}