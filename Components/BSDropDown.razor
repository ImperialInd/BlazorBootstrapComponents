@using BaseClassLibrary.Classes;
@using BlazorBootstrapComponents.Enums
@using Microsoft.AspNetCore.Components.Forms

@typeparam TValue
@typeparam ListValue

@inherits InputSelect<TValue>

@{
    object passedClass = null;
    Attributes.TryGetValue("class", out passedClass);
    string _class = string.Concat("form-select ",
                            GenerateFunctions.GenerateBackgroundColor(Background),
                            GenerateFunctions.GenerateFormSelectSize(Size),
                            passedClass != null ? passedClass.ToString() : "").Trim();
    string _style = string.Concat(Width != null ? $"Width: {Width};" : "", Inline ? "display:inline-block; " : "");
    var typeObj = Data.First().GetType();
    var textProp = typeObj.GetProperty(TextField);
    var valueProp = typeObj.GetProperty(ValueField);

    Attributes.Remove("class");
    Attributes.Add("class", _class);

    Attributes.Remove("disabled");
    if(Disabled) Attributes.Add("disabled", true);

    Attributes.Remove("style");
    if(_style.Length > 0) Attributes.Add("style", _style);

    Attributes.Remove("id");
    if (Id != null) Attributes.Add("id", Id);
}

@if (HorizontalLayout)
{
    <BSRow Class=@Class>
        <BSColumnLabel For=@Id Bold=true Size=@Size MediaWidth=@MediaWidthLabel MediaAlignment=@MediaLabelAlignment>@Title</BSColumnLabel>
        <div class="@GenerateFunctions.GenerateColumnWidth(MediaWidthDropDown)">
            <InputSelect @attributes=@Attributes Value=@Value ValueExpression=@ValueExpression ValueChanged=@ValueChanged>
                @if (DefaultLabel != null)
                {
                    <option value=0>@DefaultLabel</option>
                }
                @foreach (var item in Data)
                {
                    <option value=@valueProp.GetValue(item).ToString()>@textProp.GetValue(item).ToString()</option>
                }
            </InputSelect>
        </div>
    </BSRow>
}
else
{
    @if (FloatingLabel)
    {
        <div class="form-floating @Class">
            <InputSelect @attributes=@Attributes Value=@Value ValueExpression=@ValueExpression ValueChanged=@ValueChanged>
                @if (DefaultLabel != null)
                {
                    <option value=0>@DefaultLabel</option>
                }
                @foreach (var item in Data)
                {
                    <option value=@valueProp.GetValue(item).ToString()>@textProp.GetValue(item).ToString()</option>
                }
            </InputSelect>
            <BSLabel Bold=true For=@Id>@Title</BSLabel>
        </div>
    }
    else
    {
        <div class=@Class>
            @if (Title != null)
            {
                <BSLabel Bold=true For=@Id>@Title</BSLabel>
            }
            <InputSelect @attributes=@Attributes Value=@Value ValueExpression=@ValueExpression ValueChanged=@ValueChanged >
                @if (DefaultLabel != null)
                {
                    <option value="0">@DefaultLabel</option>
                }

                @foreach (var item in Data)
                {
                    <option value=@valueProp.GetValue(item).ToString()>@textProp.GetValue(item).ToString()</option>
                }
            </InputSelect>
        </div>
    }
}

@code {

    private const TextAlignmentEnum TAEmpty = TextAlignmentEnum.Empty;

    [Parameter] public IEnumerable<ListValue> Data { get; set; }
    [Parameter] public string DefaultLabel { get; set; }
    [Parameter] public string Class { get; set; } = string.Empty;
    [Parameter] public BackgroundColorEnum Background { get; set; } = BackgroundColorEnum.Empty;
    [Parameter] public string Title { get; set; } = string.Empty;
    [Parameter] public string Id { get; set; }
    [Parameter] public bool FloatingLabel { get; set; }
    [Parameter] public bool Disabled { get; set; }
    [Parameter] public bool HorizontalLayout { get; set; }
    [Parameter] public string TextField { get; set; }
    [Parameter] public string ValueField { get; set; }
    [Parameter] public string Width { get; set; }
    [Parameter] public bool Inline { get; set; }
    [Parameter] public ControlSizeEnum Size { get; set; } = ControlSizeEnum.Standard;
    [Parameter] public int[] MediaWidthLabel { get; set; } = new int[] { -1, -1, -1, -1, -1, -1 };
    [Parameter] public int[] MediaWidthDropDown { get; set; } = new int[] { -1, -1, -1, -1, -1, -1 };
    [Parameter] public TextAlignmentEnum[] MediaLabelAlignment { get; set; } = new TextAlignmentEnum[] { TAEmpty, TAEmpty, TAEmpty, TAEmpty, TAEmpty, TAEmpty };

    [Parameter] public Dictionary<string, object> Attributes { get; set; } = new Dictionary<string, object>();

    [Parameter] public EventCallback<TValue> OnChange { get; set; }


    protected override bool TryParseValueFromString(string value, out TValue result, out string validationErrorMessage)
    {
        if (typeof(TValue) == typeof(int))
        {
            if (int.TryParse(value, out var resultInt))
            {
                result = (TValue)(object)resultInt;
                validationErrorMessage = null;
                return true;
            }
            else
            {
                result = default;
                validationErrorMessage = $"The selected value {value} is not a valid number";
                return false;
            }
        }
        else if (typeof(TValue) == typeof(string))
        {
            result = (TValue)(object)value;
            validationErrorMessage = null;
            return true;
        }
        else
        {
            result = default;
            validationErrorMessage = $"The selected value {value} is not a valid number or string";
            return false;
        }
    }
}
