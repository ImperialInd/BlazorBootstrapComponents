@using Microsoft.AspNetCore.Components.Forms;
@using System.Linq.Expressions;
@typeparam TValue

@{
    AdditionalAttributes.Remove("disabled");
    if (Disabled) { AdditionalAttributes.Add("disabled", true); }
}
<div class="form-check @(Inline ? "form-check-inline " : "")">
    <input class="form-check-input" type="radio" name="@GroupName" id="@Id" value="@SelectedValue" checked="@(Value.Equals(SelectedValue))" @onchange=@(() => RadioOnChangeHandler(SelectedValue)) @attributes=@AdditionalAttributes>
    @if(Title != null)
    {
        <label class="form-check-label" for="@Id">@Title</label>
    }
</div>

@code {
    protected override void OnInitialized()
    {
        if (GroupName == null) throw new Exception("You must supply the [GroupName] for the Radio Group!");
        _fieldIdentifier = FieldIdentifier.Create(ValueExpression);
        if (Id == null || Id == string.Empty) Id = Guid.NewGuid().ToString();
        base.OnInitialized();
    }

    private FieldIdentifier _fieldIdentifier;
    private string _fieldCssClasses => CascadedEditContext?.FieldCssClass(_fieldIdentifier) ?? "";

    [CascadingParameter] private EditContext CascadedEditContext { get; set; }

    [Parameter] public TValue Value { get; set; }
    [Parameter] public EventCallback<TValue> ValueChanged { get; set; }
    [Parameter] public Expression<Func<TValue>> ValueExpression { get; set; }
    [Parameter] public EventCallback<TValue> OnChange { get; set; }
    [Parameter] public TValue SelectedValue { get; set; }
    [Parameter] public string GroupName { get; set; }
    [Parameter] public string Id { get; set; }
    [Parameter] public string Title { get; set; }
    [Parameter] public bool Disabled { get; set; }
    [Parameter] public bool Inline { get; set; }

    private Dictionary<string, object> AdditionalAttributes { get; set; } = new Dictionary<string, object>();

    private async void RadioOnChangeHandler(TValue value)
    {
        await ValueChanged.InvokeAsync(value);
        await OnChange.InvokeAsync(value);
    }
}
